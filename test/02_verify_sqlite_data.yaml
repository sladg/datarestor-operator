# SQLite data verification - Pod with initContainer for data population and verification
apiVersion: v1
kind: Namespace
metadata:
  name: backup-test-sqlite
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sqlite-verify-data
  namespace: backup-test-sqlite
  labels:
    backup: "true"
    app: sqlite-verify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: standard
---
apiVersion: v1
kind: Pod
metadata:
  name: sqlite-verification-pod
  namespace: backup-test-sqlite
  labels:
    app: sqlite-verify
spec:
  initContainers:
    - name: init-sqlite-data
      image: alpine:latest
      command:
        - /bin/sh
        - -c
      args:
        - |
          apk add --no-cache sqlite
          mkdir -p /data

          echo "=== Creating companies database ==="
          sqlite3 /data/companies.db << 'EOF'
          CREATE TABLE companies (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              industry TEXT,
              employees INTEGER,
              founded_year INTEGER,
              revenue REAL DEFAULT 0.0
          );

          INSERT INTO companies (name, industry, employees, founded_year, revenue) VALUES
          ('TechCorp', 'Technology', 500, 2010, 50000000.00),
          ('DataSys Inc', 'Software', 200, 2015, 15000000.00),
          ('CloudSolutions', 'Cloud Services', 150, 2018, 8000000.00),
          ('WebDev LLC', 'Web Development', 50, 2020, 2000000.00),
          ('AI Innovations', 'Artificial Intelligence', 75, 2021, 3000000.00);

          SELECT COUNT(*) as total_companies FROM companies;
          SELECT name, industry, employees FROM companies ORDER BY employees DESC;
          EOF

          echo "=== Creating users database ==="
          sqlite3 /data/users.db << 'EOF'
          CREATE TABLE users (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              username TEXT UNIQUE NOT NULL,
              email TEXT UNIQUE,
              full_name TEXT,
              department TEXT,
              created_date TEXT DEFAULT CURRENT_DATE,
              active BOOLEAN DEFAULT 1
          );

          INSERT INTO users (username, email, full_name, department, created_date, active) VALUES
          ('john_doe', 'john.doe@techcorp.com', 'John Doe', 'Engineering', '2023-01-15', 1),
          ('jane_smith', 'jane.smith@techcorp.com', 'Jane Smith', 'Marketing', '2023-02-20', 1),
          ('bob_wilson', 'bob.wilson@datasys.com', 'Bob Wilson', 'Sales', '2023-03-10', 1),
          ('alice_brown', 'alice.brown@cloudsol.com', 'Alice Brown', 'Support', '2023-04-05', 1),
          ('charlie_davis', 'charlie.davis@webdev.com', 'Charlie Davis', 'Development', '2023-05-12', 0),
          ('diana_evans', 'diana.evans@aiinnov.com', 'Diana Evans', 'Research', '2023-06-18', 1);

          SELECT COUNT(*) as total_users FROM users;
          SELECT username, department, active FROM users WHERE active = 1;
          EOF

          echo "=== Creating products and orders database ==="
          sqlite3 /data/ecommerce.db << 'EOF'
          CREATE TABLE products (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              category TEXT,
              price REAL,
              stock_quantity INTEGER,
              supplier TEXT,
              last_updated TEXT DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE orders (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              customer_name TEXT NOT NULL,
              customer_email TEXT,
              product_id INTEGER,
              quantity INTEGER,
              order_date TEXT DEFAULT CURRENT_DATE,
              status TEXT DEFAULT 'pending',
              total_amount REAL,
              FOREIGN KEY (product_id) REFERENCES products(id)
          );

          INSERT INTO products (name, category, price, stock_quantity, supplier) VALUES
          ('Laptop Pro 15"', 'Electronics', 1299.99, 25, 'TechCorp'),
          ('Wireless Mouse', 'Electronics', 29.99, 100, 'DataSys'),
          ('Office Chair', 'Furniture', 199.99, 15, 'CloudSolutions'),
          ('Coffee Maker', 'Appliances', 79.99, 30, 'WebDev LLC'),
          ('Notebook Set', 'Stationery', 12.99, 200, 'AI Innovations'),
          ('Monitor 27"', 'Electronics', 349.99, 20, 'TechCorp'),
          ('Keyboard Mechanical', 'Electronics', 89.99, 50, 'DataSys');

          INSERT INTO orders (customer_name, customer_email, product_id, quantity, status, total_amount) VALUES
          ('Alice Johnson', 'alice@email.com', 1, 1, 'completed', 1299.99),
          ('Bob Smith', 'bob@email.com', 2, 2, 'completed', 59.98),
          ('Charlie Brown', 'charlie@email.com', 4, 1, 'pending', 79.99),
          ('Diana Wilson', 'diana@email.com', 6, 1, 'shipped', 349.99),
          ('Eve Davis', 'eve@email.com', 3, 1, 'completed', 199.99),
          ('Frank Miller', 'frank@email.com', 7, 1, 'processing', 89.99);

          SELECT 'Products count:', COUNT(*) FROM products;
          SELECT 'Orders count:', COUNT(*) FROM orders;
          SELECT 'Total revenue:', SUM(total_amount) FROM orders WHERE status = 'completed';
          EOF

          echo "=== Data initialization completed ==="
          echo "Files created:"
          ls -la /data/
          echo "Database file sizes:"
          du -sh /data/*.db
      volumeMounts:
        - name: sqlite-data
          mountPath: /data

  containers:
    - name: sqlite-verifier
      image: alpine:latest
      command:
        - /bin/sh
        - -c
      args:
        - |
          apk add --no-cache sqlite
          echo "=== SQLite Verification Pod Started ==="
          echo "Available databases:"
          ls -la /data/*.db

          while true; do
            echo "=== Database Verification at $(date) ==="

            echo "Companies database:"
            sqlite3 /data/companies.db "SELECT COUNT(*) as companies_count FROM companies;"

            echo "Users database:"
            sqlite3 /data/users.db "SELECT COUNT(*) as active_users FROM users WHERE active = 1;"

            echo "E-commerce database:"
            sqlite3 /data/ecommerce.db "SELECT COUNT(*) as products_count FROM products;"
            sqlite3 /data/ecommerce.db "SELECT COUNT(*) as orders_count FROM orders;"

            echo "Sleeping for 30 seconds... (you can exec into this pod to run queries)"
            echo "Example commands:"
            echo "  sqlite3 /data/companies.db 'SELECT * FROM companies LIMIT 3;'"
            echo "  sqlite3 /data/users.db 'SELECT username, department FROM users;'"
            echo "  sqlite3 /data/ecommerce.db 'SELECT name, price FROM products WHERE price > 100;'"
            echo ""

            sleep 30
          done
      volumeMounts:
        - name: sqlite-data
          mountPath: /data
      ports:
        - containerPort: 8080
          name: http
      readinessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - sqlite3 /data/companies.db "SELECT COUNT(*) FROM companies;" > /dev/null
        initialDelaySeconds: 5
        periodSeconds: 10

  volumes:
    - name: sqlite-data
      persistentVolumeClaim:
        claimName: sqlite-verify-data

  restartPolicy: Never
